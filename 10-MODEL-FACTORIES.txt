




HOJE FOCAREMOS NO FOLDER DE 'database'...









-> JÁ CONHECEMOS MIGRATIONS,


MAS HOJE ESTUDARMOS 'FACTORIES'...









--> FACTORIES...









--> DEVEMOS VER A USERFACTORY,


    QUE É A FACTORY QUE VEM COM O LARAVEL, OUT 
    OF THE BOX...





--> BASTA EXAMINAR ESTE CÓDIGO:






database>factories>USERFACTORY











EX:






<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}











CERTO...






ACHO QUE ENTENDI...







-> ISSO TUDO É FAKE DATA....








-> ESSA FACTORY CRIA 

    RECORDS FAKE...







--> É PRATICAMENTE O 'FAKER.JS'...







--> SE QUEREMOS 1 USER QUE ESTÁ EM UM 'UNVERIFIED STATE',




PODEMOS USAR ESSE METHOD DE 'unverified()',



que vai nos ajudar a TWEAKAR 

OS ATTRIBUTES 

DE MODO QUE 



ELE SEJA INSERIDO NA DATABASE EM 


1 'UN-VERIFIED STATE'...






EX:




    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }



















OK, MAS QUAL É A UTILIDADE DE UMA 'FACTORY'?










--> NA VERDADE, HÁ VÁRIAS UTILIDADES...









--> WE CAN USE IT FOR:





1) ANY SITUATION WHERE WE NEED 
    TO SCAFFOLD/GENERATE A USER, OR SOME EXAMPLE DATA...











--> IMAGINE QUE VC ESTÁ ESCREVENDO 1 TEST...







'''GIVEN THAT I HAVE 10 USERS...

    WHEN I DA-DA-DA,

    I SHOULD PA-PA-PA....''






NO CASO, A FACTORY NOS AJUDA COM O 'GIVEN',
 

 PQ ELA VAI RAPIDAMENTE PRODUZIR ESSES 10 USERS...










 2) OUTRO USO É 'QUICKLY SPIN-UP YOUR 
                DEVELOPMENT ENVIRONMENT'....





            

        




-> QUANDO ESTAMOS TRABALHANDO NO NOSSO LOCAL ENVIRONMENT,
    É BOM TER ALGO COMO 100 USERS...




--> E AÍ PODEMOS USAR A FACTORY, PARA ISSO....












--> CERTO... AQUI TEMOS ESSA FACTORY,

SIM, 

MAS COMO PODEMOS UTILIZÁ-LA?








-> ACTUALLY, PODEMOS USÁ-LA EM QUALQUER LUGAR 
EM QUE PODEMOS EXECUTAR CÓDIGO LARAVEL...










ENTRETANTO, AQUI, O PROFESSOR VAI UTILIZÁ-LA 

DENTRO 



DO REPL DO LARAVEL,


DENTRO DO 

'php artisan tinker'...












CERTO...









ELE ENTRA NO TINKER...












AÍ, SE ELE QUER CRIAR 1 FAKE USER,

ELE PRECISA REFERENCIAR ESSA CLASS...







TIPO ASSIM:






App\Models\User 











-> MAS ANTES DE ELE EXECUTAR QUALQUER COISA 


NESSA CLASS,




O PROFESSOR ABRE O CÓDIGO DESSE MODEL,





QUE TEM ISTO:






<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    /**












aí ele fala:







'''REMEMBER WHEN WE USED 
    php artisan make:model xxxxx',






WHICH WE USED TO GENERATE A NEW MODEL...?





--> ''ON THAT OCCASION, I SAID THAT 
    THE CLASS/MODEL HAD A 'HasFactory' 
    TRAIT... NOW WE ARE GOING TO EXPLAIN WHAT THAT DOES, IN DETAIL''....
















O TRAIT DE 'HasFactory':



















use HasFactory...








--> esse trait 

ADICIONA UM BOCADO DE METHODS 


A SUA CLASS,

TUDO PARA 



QUE SEJA POSSÍVEL FAZER O GENERATE DE FACTORIES 

PARA SUA CLASS/MODEL ESPECÍFICO...













-> THESE METHODS CAN BE USED 
    TO GENERATE FACTORIES...










--> ONE OF THESE METHODS, INSIDE OF 'HasFactory.php',

the trait,



IS 



'factory()'...














--> OK... PARA CONSEGUIRMOS 


USAR A FACTORY DE USERS,



QUE EXISTE DENTRO DO MODEL DE 'User',

por conta de esse trait 'HasFactory',




DEVEMOS 


CHAMAR ASSIM:



App\Models\User::factory() 












--> AÍ, ISSO FEITO,

DEVEMOS CHAMAR 1 DOS METHODS QUE EXISTIRÁ DENTRO DA FACTORY,


O METHOD 

'create()'...












EX:





App\Models\User::factory()->create();













CERTO... E ISSO, NO CASO,


VAI 


'''CREATE A NEW FACTORY, FOR THE USER CLASS''....













--> MAS, COM ISSO, FICAMOS COM OUTRO ERROR:




O ERROR É ESTE:





   Illuminate\Database\QueryException  SQLSTATE[HY000]: General error: 
1 table users has no column named name (Connection: sqlite, SQL: insert into "users" ("name", "email", "email_verified_at", "password", "remember_token", "updated_at", "created_at") values (Miss Joyce Romaguera II, dbradtke@example.net, 2024-09-26 05:33:05, $2y$12$dJucSX3Kn.yImpfEWfhms.4tDoDx0jy8lOgIxS1Kykhh47Dzqh3bO, BQyqh8ROVw, 2024-09-26 05:33:05, 2024-09-26 05:33:05)).















NO CASO,



'table users has NO COLUMN NAMED 'name'''....













OK... ISSO É ESTRANHO...




MAS FAZ TOTAL SENTIDO... ISSO ACONTECEU 


JUSTAMENTE 



PQ 


NÓS TÍNHAMOS TROCADO OS FIELDS DO MODEL DE 'User'...














--> anteriormente, por default,
    o 'User'

    estava com um field de 'name'...






    esse field de 'name' é algo default do LARAVEL em si....






    NÓS TROCAMOS ESSE FIELD POR OUTROS 2 FIELDS,

    'first_name' e 'last_name'...







-> É POR ISSO QUE A FACTORY NÃO FUNCIONOU,


É PQ ELA ESTÁ QUERENDO EXECUTAR LÓGICA COM 1 FIELD DE 'name',


field que simplesmente NÃO EXISTE NA TABLE DE 'users'....











--> PARA CONSERTAR ISSO, BASTA TROCAR ESSE CÓDIGO,


E ESCREVER ALGO ASSIM:




<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}























ESSE 'fake()'


SE APROVEITA DE UMA API,


CHAMADA DE 'FAKER'...







EXISTE O FAKER PARA 'php' e 'js'...











--> O FAKER EXISTE METHODS PARA QUALQUER TIPO DE DATA 
    EXISTENTE...
















ISSO FEITO,

TENTAMOS NOVAMENTE...








--> ELE AINDA FALHA...







MAS PQ FALHOU?








EXPLICAÇÃO:



''WHEN YOU RUN PHP ARTISAN TINKER,
ALL THE CODE IS LOADED INTO MEMORY...

IF WE MAKE ANY CHANGES TO THE CODE,
WE NEED TO EXIT OUT OF THE TINKER/REPL,

TO THEN TEST THE CODE/CHANGES INSIDE OF IT, AFTERWARDS'''...







-> É POR ISSO QUE RODAMOS CTRL + C,

e aí 

re-rodamos o php artisan tinker,


para testar se a change consertou o problema...










COM ISSO, COM ESSE COMANDO,


1 NOVO RECORD FOI CRIADO,


NA TABLE DE 'Users':



> App\Models\User::factory()->create();
= App\Models\User {#5262
    first_name: "Jeanne",
    last_name: "Zulauf",
    email: "haley.tierra@example.com",
    email_verified_at: "2024-09-26 05:38:50",
    #password: "$2y$12$imMjsZ7o5dhk77gENqWgdOD07/LUNz4qH0QM4PZHk7gEx/BcL37lS",
    #remember_token: "Qg2CgMw0on",
    updated_at: "2024-09-26 05:38:51",
    created_at: "2024-09-26 05:38:51",
    id: 1,
  }


















--> OK... ELE REALMENTE CRIOU ESSE RECORD,

E RETORNOU 1 NOVA INSTANCE, DE ESSE USER...












---> OK...


 
 MAS DIGAMOS QUE TEMOS 


 1 SITUATION EM QUE 




 QUEREMOS 


 ''CREATE MANY RECORDS'',

 EM VEZ DE 1 ÚNICO RECORD?














 --> para isso,

 DEVEMOS


 escrever algo assim:


 > App\Models\User::factory(100)->create();














 --> COM ISSO, SE PASSAMOS 1 VALUE A '->factory()',

 como parameter,




 PODEMOS FICAR COM X NUMBER DE ROWS, DE ESSE MODEL/CLASS AÍ,


 INSERIDAS NA DATABASE...









 --> E É EXATAMENTE POR ISSO QUE FACTORIES SÃO TÃO PODEROSAS...













-> QUANDO VC ESTÁ TRABALHANDO NO SEU LOCAL ENVIRONMENT,

VC PODE USAR FACTORIES PARA CRIAR NOVOS ROWS RAPIDAMENTE...















certo...











mas digamos que 

O PROFESSOR QUER CRIAR 1 NOVA FACTORY,

DESSA VEZ PARA 'JobListings'...








-> SE ELE QUER ISSO,

BASTA RODAR 





php artisan make:factory JobListing








MAS ESCREVI ERRADO... O CORRETO SERIA:




php artisan make:factory JobListingFactory...











--> mas, pelo visto, não faz diferença,

a file ainda foi criada corretamente,

como 'JobListingFactory'...









-> DENTRO DELA, TEMOS ESTE CÓDIGO:







<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\JobListing>
 */
class JobListingFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            //
        ];
    }
}











DENTRO DE 'definition',


DEVEMOS COLOCAR OS FIELDS DE NOSSA TABLE/MODEL..













--> É POR ISSO QUE ESCREVEMOS ASSIM:







<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\JobListing>
 */
class JobListingFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'title' => fake()->jobTitle(),
            'salary' => fake()->numberBetween(1000, 10000),
        ];
    }
}












--> CERTO... ISSO FUNCIONA...










DEPOIS DISSO, TESTAMOS ESSA FACTORY,

COM 



App\Models\JobListing::factory(100)->create();











MAS AO RODARMOS ISSO,


FICAMOS COM ESTE ERROR:







''' called undefined method 'Job::factory()''.''.








-> A RAZÃO DE ESSE ERROR


ESTÁ AQUI:





<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;


class JobListing extends Model
{
    // protected $table = 'job_listings'; // * do this if you want to use a different table name (ex: model name is "Job", but table name is "job_listings")


    // * This represents 'ALL THE ATTRIBUTES THAT ARE ALLOWED TO BE MASS-ASSIGNED' (and only these attributes; attributes that are not specified here cannot be mass-assigned).
    protected $fillable = [
        'title',
        'salary',
    ];
}










em todos os cases em que vc quer criar 

1 nova coisa,

é melhor usar um GENERATOR,


COMO 'php artisan make:factory'...













php artisan make:factory JobListingFactory















-> DENTRO DISSO, O PROFESSOR ESCREVE ASSIM:







<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\JobListing>
 */
class JobListingFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'title' => fake()->jobTitle(),
            'salary' => fake()->numberBetween(1000, 10000),
        ];
    }
}



















-> VC TAMBÉM PODE HARDCODE 1 VALUE,
    EM VEZ DE USAR os methods do fake, a depender do case...













--> CERTO...







aí o professor tenta rodar isso, e fica com este error:





''' call to undefined method 'Job::factory()''.''.

















-> A RAZÃO DE ESTE ERROR ESTÁ 



NO MODEL/CLASS DE 'JobListing',
que atualmente tem este código:








<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;


class JobListing extends Model
{
    // protected $table = 'job_listings'; // * do this if you want to use a different table name (ex: model name is "Job", but table name is "job_listings")


    // * This represents 'ALL THE ATTRIBUTES THAT ARE ALLOWED TO BE MASS-ASSIGNED' (and only these attributes; attributes that are not specified here cannot be mass-assigned).
    protected $fillable = [
        'title',
        'salary',
    ];
}












NO CASO,



AINDA NÃO ESCREVEMOS O TRAIT DE 


'' 


    use HasFactory;



'''....








-> OU SEJA,

AINDA NÃO FOI APLICADO ESSE TRAIT, em 


''JobListing'',




nesse model...










--> É POR ISSO QUE ESCREVEMOS ASSIM:







<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;


class JobListing extends Model
{
    // protected $table = 'job_listings'; // * do this if you want to use a different table name (ex: model name is "Job", but table name is "job_listings")

    use HasFactory;

    // * This represents 'ALL THE ATTRIBUTES THAT ARE ALLOWED TO BE MASS-ASSIGNED' (and only these attributes; attributes that are not specified here cannot be mass-assigned).
    protected $fillable = [
        'title',
        'salary',
    ];
}


















OK... O PROFESSOR APONTA QUE 


'''IF WE MAKE ANY NEW MODEL, WITH 
    php artisan make:model xxxxxx'',



any of these new models will already include 

the 'HasFactory' trait,


LIKE THIS:








class Post extends Model 
{
    use HasFactory;
}















-> COMO NÓS CRIAMOS A CLASS/MODEL DE 'JobListing'
    MANUALMENTE,

    ELA NÃO FICOU COM ESSE TRAIT DE 'HasFactory' incluso...





















--> ESCREVEMOS ASSIM:








<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class JobListing extends Model
{
    // protected $table = 'job_listings'; // * do this if you want to use a different table name (ex: model name is "Job", but table name is "job_listings")

    use HasFactory;

    // * This represents 'ALL THE ATTRIBUTES THAT ARE ALLOWED TO BE MASS-ASSIGNED' (and only these attributes; attributes that are not specified here cannot be mass-assigned).
    protected $fillable = [
        'title',
        'salary',
    ];
}













 COM ISSO, PROVAVELMENTE PODEMOS UTILIZAR ESSA FACTORY AÍ,


 PARA CRIAR NOVOS 'JobListing'...




 RODEI ASSIM:









php artisan tinker 


App\Models\JobListing::factory(1000)->create();






e realmente funcionou.




fiz a mesma coisa com 'User'...






certo...












E VC PRECISA DO TRAIT, PQ É O TRAIT QUE NOS DEIXA USAR AQUELE 
METHOD CALL DE 

'::factory()'...














OK...









COM ISSO, CRIAMOS UM MONTE DE RANDOM JOBS...










--> TAMBÉM FICAMOS COM UM MONTE DE RANDOM USERS...











--> OK... MAS LEMBRE-SE DA FACTORY 
'UserFactory':








<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}












TEMOS AQUELE METHOD DE 'unverified()',



QUE PODE SER USADO PARA 


CRIAR USERS QUE NÃO FORAM 'VERIFIED' AINDA...









--> MAS COMO PODEMOS ATIVAR ESSE 'STATE' PARTICULAR?










--> BEM, FAZEMOS ISSO DESTA FORMA:






App\Models\User::factory()->unverified()->create();


















COM ISSO, SERÁ CRIADO 1 NOVO USER, COM O 'verified_at' 

settado como NULL...







ex:












= App\Models\User {#8322
    first_name: "Estel",
    last_name: "Volkman",
    email: "tess.zieme@example.com",
    email_verified_at: null,
    #password: "$2y$12$3FHE.E7kU5nfIBnZ/0zpqe86beZcqNXiE5.DT1MfhPdX6uU2yzpMG",
    #remember_token: "m6RRhzvQps",
    updated_at: "2024-09-26 17:22:43",
    created_at: "2024-09-26 17:22:43",
    id: 1001,



}
















QUANDO VC COMEÇAR A ESCREVER PROJECTS MAIS ROBUSTOS,



'''YOU WILL NEED TO CREATE MODELS/RECORDS IN VERY PARTICULAR STATES''',


geralmente para fazer esse tipo de coisa,



testar coisas específicas...








--> A FUNCTION DO LARAVEL QUE ACTUALLY FEZ ESSA MUDANÇA FOI 'state()'



como visto aqui:






    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }















-> podemos usar essa function para deixar outros fields como null, ou algo assim...













--> em projetos simples,

    geralmente sua table de 'users' pode 

    ter 


    1 column como 'admin', de tipo boolean...









TIPO ASSIM:








<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
            'admin' => false
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}

















se vc tiver esse field,

vc pode escrever tests como 




''' Given that I have a user 
    that is an admin, 

    when I pa-pa-pa,

    da-da-da'''',








vc poderá criar vários users 


com states específicos,



como 'admin'....







tipo assim:






    public function definition(): array
    {
        return [
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
            'admin' => false
        ];
    }






    // * Call it like this: User::factory()->admin()->create();
    public function admin(): static
    {
        return $this->state(fn (array $attributes) => [
            'admin' => true
        ]);
    }


















CERTO...










NO PRÓXIMO EPISÓDIO, TEREMOS 1 AULA INTEIRA SOBRE 


'ELOQUENT RELATIONSHIPS'...


 





MAS VEREMOS O BÁSICO, NESTE VÍDEO...















CERTO....












E FAZ SENTIDO QUE 


''ANY GIVEN JOB ON OUR SITE 
WOULD HAVE A RELATIONSHIP TO A GIVEN EMPLOYEE'''.....















-> POR EXEMPLO,

    SE TEMOS A MICROSOFT NO PROJETO,


    TEREMOS 100 DIFFERENT JOB LISTINGS,

    E QUEREMOS QUE EXISTA 1 RELATIONSHIP 

    ENTRE JOB LISTINGS E OS USERS...













--> PARA ISSO, VAMOS ATÉ O ARQUIVO DE MIGRATIONS


    DE 'job_listings',

    E AÍ TEMOS ISTO:





<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('job_listings', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->string('salary');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('job_listings');
    }
};

















-> NESSA TABLE DE 'job_listings',

    QUEREMOS FAZER COM QUE 


    '' A JOB_LISTING BELONGS TO AN EMPLOYER'''...












-> É POR ISSO QUE VAMOS QUERER UMA FOREIGN KEY 

DENTRO DE 'job_listings',



que vai ser 'employer_id'...





TIPO ALGO ASSIM:







    public function up(): void
    {
        Schema::create('job_listings', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('title');
            $table->string('salary');
            $table->timestamps();
        });
    }















COM ISSO, NÓS APONTAMOS ATÉ OS USERS...











MAS O PROFESSOR QUER TER UMA TABLE DE EMPLOYERS,
EM VEZ DE USERS..





-> PARA CRIAR UMA TABLE DE EMPLOYERS,

PODEMOS USAR OS GENERATORS 
DO PHP,

TIPO ASSIM:











php artisan make:model employers --migration --factory









EX:









PS D:\AULAS-LARAVEL\curso-laravel\code\example-10> php artisan make:model employers --migration --factory

   INFO  Model [D:\AULAS-LARAVEL\curso-laravel\code\example-10\app\Models\employers.php] created successfully.  

   INFO  Factory [D:\AULAS-LARAVEL\curso-laravel\code\example-10\database\factories\EmployersFactory.php] created successfully.  

   INFO  Migration [D:\AULAS-LARAVEL\curso-laravel\code\example-10\database\migrations/2024_09_26_173055_create_employers_table.php] created successfully.















CERTO...








AÍ ABRIMOS A MIGRAITON DE 'employers':














<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('employers', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('employers');
    }
};












E EMPLOYERS TERÃO:






1) UM NAME 






e apenas isso...






EX:

















<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('employers', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('employers');
    }
};















-> COM ISSO, LÁ NA MIGRATION DE 'create_job_listings',



O PROFESSOR ESCREVE 


''$table->unsignedBigInteger('employer_id');''









COLOCAMOS UNSIGNED JUSTAMENTE PQ 

OS IDS SERÃO SEMPRE POSITIVOS...










ex:













<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('job_listings', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('employer_id');
            $table->string('title');
            $table->string('salary');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('job_listings');
    }
};

















-> NÓS USAMOS 'unsignedBigInteger'


JUSTAMENTE PQ 

O TYPE 



DE SUA FOREIGN KEY TEM QUE SER IDÊNTICO 



AO TYPE DA KEY DA TABLE A QUE VC ESTÁ REFERENCING...






-> COMO 'id()',

no contexto do eloquent,

é sempre uma BIGINT,



devemos usar 'bigInteger'.. 













---> UMA OUTRA OPTION, MELHOR,

É USAR 


'$table->foreignIdFor()'....








EX:













<?php

use App\Models\Employer;
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('job_listings', function (Blueprint $table) {
            $table->id();
            $table->foreignIdFor(Employer::class);
            $table->string('title');
            $table->string('salary');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('job_listings');
    }
};

















OK...









COMO FIZEMOS VÁRIAS CHANGES, E ESTAMOS NO INÍCIO DO PROJECT,


É VANTAJOSO 


RODAR 





''''

php artisan migrate:fresh 



''''
















--> ISSO VAI DROPPAR TUDO E RUN FROM SCRATCH...










-> É CLARO QUE TODA NOSSA DATA TERÁ SIDO PERDIDA,




TODOS OS JOBS E TODOS OS USERS...















-> MAS A BOA NOTÍCIA É QUE, EM 'job_listings',

temos 


a column de 

'employer_id'





QUE SE REFERE À TABLE  de 'employers'...













CERTO...











AGORA, SE VAMOS ATÉ 'JobListingFactory',





PERCEBEMOS QUE A LÓGICA ESTÁ ERRADA:














<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\JobListing>
 */
class JobListingFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'title' => fake()->jobTitle(),
            'salary' => fake()->numberBetween(1000, 10000),
        ];
    }
}












ISSO ACONTECE/ACONTECEU JUSTAMENTE PQ O 

'employer_id'
 


 NÃO FOI PROVIDENCIADO...










PRECISAMOS UPDATAR ESSA FACTORY,

E COLOCAR UM 'employer_id',

de algum value...







-> PODEMOS HARDCODAR, COLOCAR UM VALUE DE '1'...







-> MAS SERIA MAIS ÚTIL 



''WHENEVER YOU GENERATE A JOB LISTING,
    GENERATE ANY CORRESPONDING RELATIONSHIPS,
    LIKE A CONNECTED EMPLOYER''...









--> PARA FAZER ISSO, PODEMOS, NOVAMENTE,
    USAR OS HELPER METHODS DO ELOQUENT,


    TIPO ASSIM:













<?php

namespace Database\Factories;

use App\Models\Employer;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\JobListing>
 */
class JobListingFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'title' => fake()->jobTitle(),
            'employer_id' => Employer::factory(),
            'salary' => fake()->numberBetween(1000, 10000),
        ];
    }
}


















OK... COM ISSO, QUANDO O LARAVEL CHEGAR NESSE TRECHO,




ELE VAI 'KNOW' 



QUE 


VAI PRECISAR CRIAR ESSE EMPLOYER NA DATABASE,

E QUE ENTÃO DEVERÁ SER USADO ESSE unique id 

COMO CORRESPONDING 'employer_id'...
















-> ok... mas tentamos  rodar isso, com 




php artisan tinker 




App\Models\JobListing::factory(300)->create();











E ISSO VAI, NOVAMENTE, RESULTAR EM UM ERROR...







ENTRETANTO, DESSA VEZ,


O ERROR 

SERÁ 


''



> App\Models\JobListing::factory(300)->create();

   Error  Class "Database\Factories\EmployerFactory" not found.




'''










OU SEJA,

PRECISAMOS DE ESSE 'EmployerFactory'...








tipo assim:












<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\employers>
 */
class EmployerFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            //
        ];
    }
}












E PRECISAMOS, TAMBÉM,


CRIAR A LÓGICA CORRESPONDENTE...








EX:









> App\Models\JobListing::factory(300)->create();

   Illuminate\Database\QueryException  SQLSTATE[23000]: Integrity constraint violation: 19 NOT NULL constraint failed: employers.name (Connection: sqlite, SQL: insert into "employers" ("updated_at", "created_at") values (2024-09-26 17:42:39, 2024-09-26 17:42:39)).










--> OU SEJA,

AGORA PRECISAMOS DEFINIR A LÓGICA CORRETA,

PARA O CREATE DE ESSES 'Employers'...









--> PARA ISSO, PODEMOS ESCREVER ASSIM:





<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\employers>
 */
class EmployerFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->company(),
        ];
    }
}













ok... e isso realmente funciona...






foram criados 300 job listings,


com 300 companies correspondentes...



















O PROFESSOR 




fala da flag de '--factory', que podemos utilizar,


quando fazemos o generate de um model...











-> o professor escreve tipo assim:









php artisan make:model -m -f 







--> COM ISSO, FICAMOS COM O MODEL, COM A MIGRATION E COM A FACTORY...







--> ISSO FEITO,


o professor escreve assim:








<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\employers>
 */
class EmployerFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->company(),
        ];
    }
}













OK... RODAMOS TUDO ISSO... E AÍ FUNCIONA...









CADA JOB LISTING PERTENCE A 1 EMPLOYER DIFERENTE...











--> MAS É CLARO QUE EXISTIRÃO SITUAÇÕES EM QUE VC VAI QUERER 
    QUE MÚLTIPLOS JOB LISTINGS PERTENÇAM A 1 MESMO EMPLOYER...










--> PARA CASES COMO ESSES, VC PODE USAR UM METHOD CHAMADO DE '->recycle()',

    MAS NÃO VEREMOS ISSO AINDA...
















RESUMINDO:









1) MODEL FACTORIES ARE GREAT FOR SCAFFOLDING DATA FOR YOUR LOCAL ENVIRONMENT 





2) GREAT FOR GENERATING DATA FOR YOUR TESTS...













-> NÓS ACABAMOS COM 1 POUCO SOBRE DATABASE RELATIONSHIPS...







-> AGORA 1 JOB_LISTING PERTENCE A 1 EMPLOYER...



--> ISSO ESTÁ FUNCIONANDO NO 'DATABASE-END'...



-> MAS AINDA NÃO ESTÁ FUNCIONANDO NO 'LARAVEL/APP-END'...




--> SE EU TENHO 1 JOB OBJECT,

EU QUERO FETCHEAR 

O NAME 

DO EMPLOYER QUE CRIOU ESSE JOB...










--> COMO PODEMOS FAZER ISSO?

VEREMOS NA PRÓXIMA AULA...